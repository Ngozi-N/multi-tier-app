pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID     = '693013325979'
        AWS_REGION         = 'eu-west-2'
        ECR_REGISTRY       = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        PROJECT_NAME       = 'multi-tier-app'
        BACKEND_IMAGE      = "${ECR_REGISTRY}/${PROJECT_NAME}-backend"
        BACKEND_PORT       = 3001
        DB_USERNAME        = 'dbadmin'
        DB_NAME            = 'webappdb'
        DB_HOST            = 'terraform-20250706152932061400000001.cl8go08ccbox.eu-west-2.rds.amazonaws.com'
        BACKEND_ALB_DNS_NAME = 'internal-multi-tier-app-backend-alb-1551843712.eu-west-2.elb.amazonaws.com'
    }

    stages {
        stage('Checkout') {
            steps {
                // This checks out the entire multi-tier-app repository
                git branch: 'main', credentialsId: 'github-credentials', url: 'https://github.com/Ngozi-N/multi-tier-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // CORRECTED: Specify the 'backend' folder as the build context
                    sh "docker build -t ${BACKEND_IMAGE}:${env.BUILD_NUMBER} ./backend"
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    withAWS(credentials: 'aws-credentials', region: AWS_REGION) {
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${BACKEND_IMAGE}:${env.BUILD_NUMBER}"
            }
        }

        stage('Deploy to EC2 (Backend ASG)') {
            steps {
                script {
                    def ltName = "multi-tier-app-backend-lt20250706152341181800000002"
                    def currentLtId = sh(returnStdout: true, script: "aws ec2 describe-launch-templates --launch-template-names \"${ltName}\" --query \"LaunchTemplates[0].LaunchTemplateId\" --output text").trim()
                    def currentLtVersion = sh(returnStdout: true, script: "aws ec2 describe-launch-templates --launch-template-names \"${ltName}\" --query \"LaunchTemplates[0].LatestVersionNumber\" --output text").trim()

                    withCredentials([string(credentialsId: 'SecureDBPassword', variable: 'DB_PASSWORD')]) {
                        def userDataScript = """
#!/bin/bash
docker stop ${PROJECT_NAME}-backend || true
docker rm ${PROJECT_NAME}-backend || true

docker pull ${BACKEND_IMAGE}:${env.BUILD_NUMBER}

docker run -d --name ${PROJECT_NAME}-backend -p ${BACKEND_PORT}:${BACKEND_PORT} \\
    -e DB_HOST=${DB_HOST} \\
    -e DB_USERNAME=${DB_USERNAME} \\
    -e DB_PASSWORD=${DB_PASSWORD} \\
    -e DB_NAME=${DB_NAME} \\
    ${BACKEND_IMAGE}:${env.BUILD_NUMBER}
                        """
                        def base64UserData = userDataScript.bytes.encodeBase64().toString()

                        sh """
                            aws ec2 create-launch-template-version \\
                                --launch-template-id ${currentLtId} \\
                                --source-version ${currentLtVersion} \\
                                --launch-template-data '{\\"UserData\\": \\"${base64UserData}\\"}'
                        """
                    }

                    // Fix: Assign the ASG_NAME to a Groovy variable first
                    def asgName = sh(returnStdout: true, script: "aws autoscaling describe-auto-scaling-groups --filters \"Name=tag:Name,Values=${PROJECT_NAME}-backend-asg\" --query \"AutoScalingGroups[0].AutoScalingGroupName\" --output text").trim()

                    sh """
                        aws autoscaling start-instance-refresh --auto-scaling-group-name ${asgName}
                        echo "Instance refresh initiated for ASG ${asgName}. Monitor AWS console for completion."
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                sh "curl -f http://${BACKEND_ALB_DNS_NAME}/health"
            }
        }
    }
}